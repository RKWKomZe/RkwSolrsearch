plugin.tx_solr {

    view {
        templateRootPaths {
            10 = EXT:rkw_solrsearch/Resources/Private/Templates/Solr/Templates/
        }
        partialRootPaths {
            10 = EXT:rkw_solrsearch/Resources/Private/Partials/Solr/Partials/
        }
        layoutRootPaths {
            10 = EXT:rkw_solrsearch/Resources/Private/Layouts/Solr/Layouts/
        }

        templateFiles {
            results {
                availableTemplates {
                    rkwList {
                        label = RKW Events
                        file = RkwEvents
                    }
                    siteSearchResults {
                        label = RKW SiteSearch Results
                        file = SiteSearchResults
                    }
                }
            }
            form {
                availableTemplates {
                    sitesearch {
                        label = RKW SiteSearch Form
                        file = SiteSearchForm
                    }
                }
            }
        }
    }

    general {
        dateFormat.date = d.m.Y H:i
    }

    statistics = 1
    statistics.anonymizeIP = 1

    suggest = 1

    search {
        initializeWithEmptyQuery = 1
        showResultsOfInitialEmptyQuery = 1
        keepExistingParametersForNewSearches = 1

        query {
            # this is important to get filter options, forms etc, even if the user makes an empty request
            allowEmptyQuery = 1
            filter {
                // filter old events also in general search
                // the querystring "type: tx_rkwevents_domain_model_event AND" is logically not necessary but helps...
                // ... to understand what happen here (that endDate and isAnnouncement relates explicit to events)
                dateFilter = type: pages OR (type: tx_rkwevents_domain_model_event AND (endDate_dateS: [NOW/DAY TO *] OR isAnnouncement_intS: 1))
            }

            // ! this is a BAD solution. That kills better ways for relevance calculation with boostQuery and boostFunction !
            #sortBy = recordType_stringS desc, startDate_dateS asc


            // the function "sortBy" predominates other Stuff like boostQueries which have in consequence no real effect anymore
            boostQuery {
                #boostEvents = (type:tx_rkwevents_domain_model_event)^1
            }

            # more technical boost
            # !! conflicts (in a logical way) with crappy "sortBy". Use only one of them !!
            # the "-2MONTH" addition is used because we can have active events (with endDate in future) which...
            # ... have startDate already in the past. Calculate back in time to give them a higher ranking
            # @toDo: Solve boosting for Event-Records with "boostQuery" instead of "boostFunction"?
            boostFunction = recip(abs(ms(NOW-2MONTH,startDate_dateS)),3.16e-11,1,0)^15 termfreq(documentType_stringM,'Blog-Beitrag')^3 termfreq(documentType_stringM,'Service')^8 termfreq(recordType_stringS,'\\RKW\\RkwEvents\\Domain\\Model\\EventScheduled')^10

            # following lines does not work. The variable "boostFunction" seems only to allow simple strings
            #boostFunction = TEXT
            #boostFunction {
            #    value = recip(abs(ms(NOW-2MONTH,startDate_dateS)),3.16e-11,1,0)
            #    value := appendString( termfreq(documentType_stringM,'Blog-Beitrag')^0.1)
            #    value := appendString( termfreq(documentType_stringM,'Service')^1)
            #    value := appendString( termfreq(recordType_stringS,'\\RKW\\RkwEvents\\Domain\\Model\\EventScheduled')^10)
            #}


            # Example from documentation which gives new dates a higher prio (for newer blog entries e.g.)
            #boostFunction = recip(ms(NOW,startDate_dateS),3.16e-11,1,1)

        }

        results {
            resultsHighlighting = 1
            siteHighlighting = 1
            showDocumentScoreAnalysis = 1
        }

        spellchecking = 1
        spellchecking {
            searchUsingSpellCheckerSuggestion = 1
        }
        #lastSearches = 1
        #frequentSearches = 1
        sorting = 1
        faceting = 1
        variants = 1

        faceting {
            showEmptyFacets = 1
        }
    }

    logging {
        exceptions = 1
        #debugOutput = 1

        indexing {
            indexQueueInitialization = 1
            missingTypo3SearchMarkers = 1
            pageIndexed = 1

            queue {
                pages = 0
                rkw_events = 1
            }
        }

        query {
            filters = 1
            searchWords = 1
            queryString = 1
            rawPost = 1
            rawGet = 1
        }
    }
}
